@model SmartWay.Model.Models.ParentModel
@{
    /**/

    ViewBag.Title = "Home Page";
    Layout = null;
}


@*<link href="https://rawgit.com/select2/select2/master/dist/css/select2.min.css" rel="stylesheet" />*@

<style type="text/css">
    .tap1 {
        display: none;
        z-index: 9990;
        opacity: 0.5;
        width: 100%;
        height: 100%;
        position: fixed;
        background: #FFF none repeat scroll 0% 0%;
    }

    .tap2 {
        display: none;
        z-index: 9995;
        overflow: auto;
        opacity: 0.5;
        width: 50%;
        height: 60%;
        top: 50%;
        left: 50%;
        padding: 20px;
        position: fixed;
        border-radius: 5px;
    }

    #image {
        width: 12px;
        height: 12px;
    }

</style>

<link href="~/Content/Css/bootstrap-base.min.css" rel="stylesheet" />
<link href="~/Content/Css/bootstrap.min.css" rel="stylesheet" />
<link href="~/Content/Css/joint.css" rel="stylesheet" />
<link href="~/Content/Css/select2.min.css" rel="stylesheet" />
<script src="~/Scripts/JS/jquery-3.3.1.slim.min.js"></script>
<script src="~/Scripts/JS/popper.min.js"></script>
<script src="~/Scripts/JS/bootstrap.min.js"></script>
<script src="~/Scripts/JS/jquery.js"></script>
<script src="~/Scripts/JS/lodash.js"></script>
<script src="~/Scripts/JS/backbone.js"></script>
<script src="~/Scripts/JS/joint.js"></script>
<script src="~/Scripts/JS/select2.min.js"></script>



<div class="container-fluid" style="margin-top:3%">
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-info">
                <div class="panel-heading"></div>
                <div class="panel-body">
                    <form class="form-inline">
                        <div class="form-group col-md-6">
                            <div class="form-group col-md-3">
                                <label for="email" >Select Application:</label>

                            </div>

                            @*<div class="col-md-3">  <label for="email">Select Application</label></div>*@


                            <div class="col-md-6">
                                @Html.DropDownListFor(m => m.applicationList, new SelectList(Model.applicationList, "Id", "Name"), "--Select--", new { @class = "form-control" })
                                @*<button type="button" id="btnShow" class="btn btn-primary">Show</button>
                                    <button type="button" id="btnClear" class="btn btn-primary">Clear</button>*@
                            </div>

                        </div>



                    </form>
                </div>
            </div>






        </div>
    </div>
    <div class="row">
        @*<div class="col-md-12">*@
        <div class="panel panel-info">
            <div class="panel-heading">JointJs Graph</div>
            <div class="panel-body">
                <div class="tap2">                    
                    <img src="~/Content/805.gif"  />
                </div>
                <div class="row">
                    @*<button type="button" id="btnLoad" class="btn btn-primary" style="margin-left:190px;">
                        Load Sub-System
                    </button>*@
                    <div id="myholder"></div>
                </div>




            </div>
        </div>

    </div>
    @*</div>*@
</div>

<script type="text/javascript">

    $('#applicationList').select2({
        placeholder: 'Select'
    });
    $(document).ready(function () {
        $("#applicationList").select2();
        $("#btnLoad").hide();
        $(".tap2").hide();
        

    })
    var graph = new joint.dia.Graph;

    var paper = new joint.dia.Paper({
        el: document.getElementById('myholder'),
        model: graph,
        width: 3500,
        height: 1400,
        gridSize: 5,
        drawGrid: false
        //background: {
        //    color: 'rgba(255, 165, 0, 0.3)'
        //}
    });

   
    var getUrl = window.location;
    var baseUrl = getUrl.protocol + "//" + getUrl.host + "/" + getUrl.pathname.split('/')[1];
    var documentWidth = document.getElementById('myholder').scrollWidth;
    var documentHeight = document.getElementById('myholder').scrollHeight;
    var documentX = (documentWidth * 20) / 100;
    var documentY = (documentHeight * 20) / 100;
    var documentWidthMid = (documentWidth / 2);
    var documentHeightMid = (documentHeight / 2);
    var prevPositionX = 0, prevPositionY = 0;
    var firstLeafPositionX = 0;
    var prevParentPositionX = 0, prevParentPositionY = 0;
    var prevLeafPositionX = 0, prevLeafPositionY = 0;

    var count = 0;
    var levelflag = false;
    var JsonDataMain = {};
    var JsonData = {}; var clickedElementName = ""; oldparent = "";
    var TempData = []; var JsonDataNew = {};


    var parent = $("#applicationList option:selected").text();
    function checkIsApplication(shapeLabel, JsonData) {
        debugger;
        var levelData = $.grep(JsonData, function (el) {
            return el.shapeLabel == shapeLabel;
        });
        return levelData[0].IsApplication;
    }
    
   
    function bindData() {

        JsonData = [];
        //console.log('Before' + JSON.stringify(JsonData));

        var a = $("#applicationList option:selected").text();


        var FirstNodeJsonData = JSON.parse('{"id": 1,"shapeType": "Rectangle","shapeControlName":"' + a + '","shapeLabel": "' + a + '","linkSource": null,"linkTarget": null,"parent":null,"IsLeaf":false,"IsBase": false,"IsApplication": true,"Level": 1}');
        JsonData.push(JSON.parse(JSON.stringify(FirstNodeJsonData)));

        console.log('After ' + JSON.stringify(JsonData));

        var controlName = $("#applicationList option:selected").text();
        controlName = new joint.shapes.standard.Rectangle();
        window[a] = controlName;
        window[parent] = controlName;

        controlName.position(550, 0);
        prevParentPositionX = 200;
        prevParentPositionY = 100;
        controlName.resize(170, 60);
        controlName.attr({
            body: {
                fill: '#f7a07b',
                stroke: 'black',
                strokeWidth: 2
            },
            label: {
                text: $("#applicationList option:selected").text(),
                fill: 'black'
            }
        });
        controlName.addTo(graph);

    }

    function drawLeftChild(currentLevel,isApp) {


        var leftChildPositionX = 100;
        var leftChildPositionY = 200;


        if (currentLevel == 1) {
            //prevParentPositionY = 250;
            leftChildPositionX = leftChildPositionX + 0;
            leftChildPositionY = 200;
        }

        if (currentLevel == 2) {
            leftChildPositionY = 500;
            leftChildPositionX = leftChildPositionX + 250;


        }

        if (currentLevel == 3) {
            leftChildPositionY = 800;
            leftChildPositionX = leftChildPositionX + 250;


        }

        if (currentLevel == 4) {
            leftChildPositionY = 750;
            leftChildPositionX = leftChildPositionX + 250;


        }


        if (!isApp) {
            return;
        }

        var LeftChildInputModel = {
            shapeLabel: clickedElementName,
            isApplication: isApp
        }

        $.ajax({
            type: 'POST',
            //url: 'Home/GetSubsystemApplications',
            url:'@Url.Action("GetSubsystemApplications", "Home")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify({ model: LeftChildInputModel }),
            //url: '/Home/GetSubsystemApplicationByName?shapeLabel=' + name + '', //name of your json file                                                           
            success: function (response) {

              
                //for (var i in response) {

                //    leftChildJson.find(response[i])
                //    leftChildJson.push(response[i]);
                //    alert(JSON.stringify(response[i]));
                //}

                var leftChildJson = [];
                leftChildJson=JSON.parse(JSON.stringify(response));
                //load leftchild for clicked item
                for (var i in leftChildJson) {
                    if (leftChildJson[i].shapeType == "Rectangle" && leftChildJson[i].shapeType != "Link") {
                        var controlName = leftChildJson[i].shapeControlName;
                        controlName = new joint.shapes.standard.Rectangle();
                        window[leftChildJson[i].shapeControlName] = controlName;
                       
                        controlName.position(leftChildPositionX, leftChildPositionY);
                        leftChildPositionY = leftChildPositionY + 150;
                        //leftChildPositionX = leftChildPositionX + 100;
                        controlName.resize(140, 60);
                        controlName.attr({
                            body: {
                                fill: 'lightblue',
                                stroke: 'black',
                                strokeWidth: 2
                            },
                            label: {
                                text: leftChildJson[i].shapeLabel,
                                fill: 'black'
                            }
                        });
                        controlName.addTo(graph);
                    }
                    if (leftChildJson[i].shapeType == "Cylinder" && leftChildJson[i].shapeType != "Link") {
                        var controlName = leftChildJson[i].shapeControlName;
                        controlName = new joint.shapes.standard.Cylinder();
                        window[leftChildJson[i].shapeControlName] = controlName;
                        controlName.resize(60, 60);
                        controlName.position(leftChildPositionX, leftChildPositionY);
                        leftChildPositionY = leftChildPositionY + 150;
                        // leftChildPositionX = leftChildPositionX + 100;
                        controlName.attr('root/title', 'joint.shapes.standard.Cylinder');
                        controlName.attr('body/fill', 'lightblue');
                        controlName.attr('top/fill', 'lightblue');
                        controlName.attr('label/text', leftChildJson[i].shapeLabel);
                        controlName.topRy('10%');
                        controlName.addTo(graph);
                    }
                    if (leftChildJson[i].shapeType == "Link") {
                        var controlName = leftChildJson[i].shapeControlName;
                        controlName = new joint.shapes.standard.Link({
                            source: { id: window[leftChildJson[i].linkSource].id },
                            target: { id: window[leftChildJson[i].linkTarget].id },
                            router: { name: 'manhattan' },
                            connector: { name: 'normal' }
                        });
                        controlName.addTo(graph);
                    }
                }

            }
        });
    }

    function getCompleteGraph(currentLevel, name) {
        
        //JsonDataMainNew = JSON.parse(JSON.stringify(JsonDataMain));
        graph.clear();
        var selectedApplication = $("#applicationList").val();

        $(".tap2").show();
        
        var val = JsonData.length > 1 ? 1 : null;

        var graphInputModel = {
            shapeLabel: name,
            itemid: val,
            selectedParentId: parseInt(selectedApplication)
        }

        $.ajax({
            type: 'POST',            
            //url: 'Home/GetCompletGraph', //name of your json file
            url:'@Url.Action("GetCompletGraph", "Home")',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            data: JSON.stringify({ graphInput: graphInputModel,inputJsonModel: JsonData }),
            success: function (resp) {

                $(".tap2").hide();
                //for (var i in resp) {
                //    JsonData.push(resp[i]);
                //}
                console.log('FINAL' + JSON.stringify(resp));

                JsonData = resp;

                
                drawGraph(currentLevel, JsonData);


                
            }
        });
    }


    function getCurrentLevel(shapeLabel, JsonData) {
        var levelData = $.grep(JsonData, function (el) {
            return el.shapeLabel == shapeLabel;
        });
        return levelData[0].Level;
    }

    function drawGraph(currentLevel, data) {


        var currentLevel = currentLevel;
        prevParentPositionY = 0;
        var currlevel = 1;

        prevParentPositionX = 250;

        

        for (var i in JsonData) {
            if (JsonData[i].Level != currlevel)
                prevParentPositionX = 250;



            //alert(prevParentPositionX);
            //set first positioning
            if (JsonData[i].Level == 1 && JsonData[i].shapeType != "Link") {
                //prevParentPositionY = 250;
                prevParentPositionX = prevParentPositionX + 150;
                currlevel = JsonData[i].Level;
            }

            if (JsonData[i].Level == 2 && JsonData[i].shapeType != "Link") {
                prevParentPositionY = 350;
                prevParentPositionX = prevParentPositionX + 150;
                currlevel = JsonData[i].Level;

            }

            if (JsonData[i].Level == 3 && JsonData[i].shapeType != "Link") {
                prevParentPositionY = 650;
                prevParentPositionX = prevParentPositionX + 150;
                currlevel = JsonData[i].Level;

            }

            if (JsonData[i].Level == 4 && JsonData[i].shapeType != "Link") {
                prevParentPositionY = 950;
                prevParentPositionX = prevParentPositionX + 150;
                currlevel = JsonData[i].Level;

            }


            if (JsonData[i].Level == 5 && JsonData[i].shapeType != "Link") {
                prevParentPositionY = 1250;
                prevParentPositionX = prevParentPositionX + 150;
                currlevel = JsonData[i].Level;

            }




            if (JsonData[i].shapeType == "Rectangle" && JsonData[i].shapeType != "Link") {

                var controlName = JsonData[i].shapeControlName;
                controlName = new joint.shapes.standard.Rectangle();
                window[JsonData[i].shapeControlName] = controlName;                                
                controlName.position(prevParentPositionX + 150, prevParentPositionY);
                controlName.resize(140, 60);
                controlName.attr({
                    body: {
                        fill: '#f7a07b',
                        stroke: 'black',
                        strokeWidth: 2
                    },
                    label: {
                        text: JsonData[i].shapeLabel,
                        fill: 'black'
                    }
                });
                controlName.addTo(graph);

              
            }

            if (JsonData[i].shapeType == "Cylinder" && JsonData[i].shapeType != "Link") {

                var controlName = JsonData[i].shapeControlName;
                controlName = new joint.shapes.standard.Cylinder();
                window[JsonData[i].shapeControlName] = controlName;
                controlName.resize(60, 60);
                controlName.position(prevParentPositionX + 150, prevParentPositionY);
                controlName.attr('root/title', 'joint.shapes.standard.Cylinder');
                controlName.attr('body/fill', 'lightgray');
                controlName.attr('top/fill', 'gray');
                controlName.attr('label/text', JsonData[i].shapeLabel);
                controlName.topRy('10%');
                controlName.addTo(graph);

                
            }
            if (JsonData[i].shapeType == "Link") {
                var controlName = JsonData[i].shapeControlName;
                controlName = new joint.shapes.standard.Link({
                    source: { id: window[JsonData[i].linkSource].id },
                    target: { id: window[JsonData[i].linkTarget].id },
                    router: { name: 'manhattan' },
                    connector: { name: 'rounded' }
                });
                controlName.addTo(graph);
            }

        }

        var isApp = checkIsApplication(clickedElementName, JsonData);
        console.log(isApp);
        drawLeftChild(currentLevel, isApp);
    }


    paper.on('cell:pointerdblclick', function (cellView) {

        if (!cellView.model.isClicked) {
            cellView.model.isClicked = true;
            if (cellView.model.isClicked) {
                var isElement = cellView.model.isElement();
                var message = (isElement ? 'Element' : 'Link') + ' clicked';
                var currentElement = cellView.model;
                clickedElementName = currentElement.attributes.attrs.label.text
                //get clicked element level
                var currentLevel = getCurrentLevel(clickedElementName, JsonData);
                if (currentLevel == 4) {
                    return;
                }

               
                //call complete graph ajax request and draw graph
                getCompleteGraph(currentLevel, clickedElementName);         

               

                cellView.model.isClicked = false;
            }
            
        }
    });

    $("#applicationList").change(function () {
        count = 0;
        JsonData = [];
        graph.clear();
        bindData();
        $("#btnLoad").show();
        
    });

    $("#btnLoad").click(function () {
        //bindData();
        LoadSubSytem();      
    });

    function LoadSubSytem() {
        var leftChildPositionX = 200;
        var leftChildPositionY = 50;
        $.ajax({
            type: 'GET',
            url: '/Home/GetSubsystemApplications/' + $("#applicationList").val(),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            //data: JSON.stringify({ inputJsonModel: JsonData }),
            success: function (response) {
                
                var leftChildJson = [];
                leftChildJson = JSON.parse(JSON.stringify(response));






                for (var i in leftChildJson) {
                    if (leftChildJson[i].shapeType == "Rectangle" && leftChildJson[i].shapeType != "Link") {
                        var controlName = leftChildJson[i].shapeControlName;
                        controlName = new joint.shapes.standard.Rectangle();
                        window[leftChildJson[i].shapeControlName] = controlName;
                        controlName.position(leftChildPositionX, leftChildPositionY);
                        leftChildPositionY = leftChildPositionY + 100;
                        controlName.resize(140, 60);
                        controlName.attr({
                            body: {
                                fill: 'lightblue',
                                stroke: 'black',
                                strokeWidth: 2
                            },
                            label: {
                                text: leftChildJson[i].shapeLabel,
                                fill: 'black'
                            }
                        });
                        controlName.addTo(graph);
                    }
                    if (leftChildJson[i].shapeType == "Cylinder" && leftChildJson[i].shapeType != "Link") {
                        var controlName = leftChildJson[i].shapeControlName;
                        controlName = new joint.shapes.standard.Cylinder();
                        window[leftChildJson[i].shapeControlName] = controlName;
                        controlName.resize(60, 60);
                        controlName.position(leftChildPositionX, leftChildPositionY);
                        leftChildPositionY = leftChildPositionY + 100;
                        controlName.attr('root/title', 'joint.shapes.standard.Cylinder');
                        controlName.attr('body/fill', 'lightblue');
                        controlName.attr('top/fill', 'lightblue');
                        controlName.attr('label/text', leftChildJson[i].shapeLabel);
                        controlName.topRy('10%');
                        controlName.addTo(graph);
                    }
                    if (leftChildJson[i].shapeType == "Link") {
                        var controlName = leftChildJson[i].shapeControlName;
                        controlName = new joint.shapes.standard.Link({
                            source: { id: window[leftChildJson[i].linkSource].id },
                            target: { id: window[leftChildJson[i].linkTarget].id },
                            router: { name: 'manhattan' },
                            connector: { name: 'rounded' }
                        });
                        controlName.addTo(graph);
                    }
                }
            }
        });
    }


</script>